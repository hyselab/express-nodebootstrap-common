var exports = module.exports;

function AdapterConnection(conn) {
    this.conn = conn;
    this.threadId = null;
    this.tables = [];
    this.config = CONF.mysql;
    this.tb_prefix = CONF.mysql.tb_prefix;
    /*
     this.conn.config.queryFormat = function (query, values) {
     if (!values) {
     return query;
     }
     return query.replace(/\:(\w+)/g, function (txt, key) {
     if (values.hasOwnProperty(key)) {
     return this.escape(values[key]);
     }
     return txt;
     }.bind(this));
     }; */
    return this;
}

AdapterConnection.prototype.getConn = function() {
    return this.conn;
}

AdapterConnection.prototype.isConnected = function() {
    return this.conn.threadId;
}

var _functions = ['query', 'changeUser', 'beginTransaction', 'commit', 'rollback', 'format', 'statistics', 'ping', 'end', 'destroy', 'pause', 'resume', 'escape', 'escapeId'];
_functions.forEach(function(fn) {
    AdapterConnection.prototype[fn] = function() {
        if( ( ['escape', 'escapeId', 'format'].indexOf(fn) > -1 ) && !this.isConnected() ) {
            this.connect();
        }
        if( fn == 'destroy' ) {
            this.threadId = null;
        }
        return this.conn[fn].apply(this.conn, slice.call(arguments) );
    }
});

AdapterConnection.prototype.getTable = function(name, needCheck) {
    var fullname = this.tb_prefix + name;
    if( needCheck ) {
        if( !this.tables.length && !this.isConnected() ) {
            this.connect();
        }
        if( this.tables.indexOf(fullname) > -1 ) {
            return fullname;
        }
        throw new Error("Invalid table " + fullname);
    }
    return fullname;
}

AdapterConnection.prototype.connect = function() {
    var self = this;
    this.conn.connect(function(err) {
        self.tables = CONF.mysql.TABLES = [];
        if (err) {
            console.error('mysql connection error connecting: ' + err.stack);
            throw err;
            return;
        }
        self.threadId = self.conn.threadId;

        console.log('connected as id ' + self.conn.threadId);

        connection.query("SHOW TABLES FROM " + CONF.mysql.database, function(err, rows, fields){
            rows.forEach(function(row){
                CONF.mysql.TABLES.push( row[fields[0].name] );
            });
            self.tables = CONF.mysql.TABLES;
            // module.exports.dumpExit("SHOW TABLES: rows", {rows: rows, fields: fields, TABLES: CONF.mysql.TABLES});
        });
    });
};

exports.AdapterConnection = AdapterConnection;

exports.getRootServer = function getRootServer(_module) {
    _module = _module || module;
    var mod = _module;
    while(true) {
        if( mod.id == '.' && mod.filename.match(/\/server\.js$/) ) {
            return mod;
        }
        mod = mod.parent;
    }
    return null;
}

// var connection = exports.connection = new Connection(mysql_connection);
var connection = exports.connection = null;

exports.createConnection = function(_connection) {
    var rootModule = exports.getRootServer(module);
    var CONF = rootModule.exports.CONF;
    if( _connection ) {
        if( !(_connection instanceof AdapterConnection) ) {
            if( _connection instanceof Connection ) {
                _connection = new AdapterConnection(_connection);
            } else {
                var mysql = require('../../../mysql');
                _connection = mysql.createConnection(_connection);
                _connection = new AdapterConnection(_connection);
            }
        }
    } else {
        var mysql = require('../../../mysql');
        _connection = mysql.createConnection(CONF.mysql);
        _connection = new AdapterConnection(_connection);
    }

    connection = exports.connection = _connection;
    return connection;
}

exports.cleanupApp = function cleanupApp(msg) {
    msg = (msg || '') + 'express-nodebootstrap-common/node_modules/mysql-adapter.js -> cleanupApp -> mysql connection.end(); mysql connection.destroy();';
    try {
        if( exports.connection && exports.connection.getConn().state == 'connected' ) {
            exports.connection.getConn().end();
            exports.connection.getConn().destroy();
        }
    } catch(e) {
        console.log('express-nodebootstrap-common/node_modules/mysql-adapter.js -> cleanupApp -> mysql connection.end(); mysql connection.destroy();: Exception: ' + e.message);
    }
    console.log(msg);
}

exports.createConnection();