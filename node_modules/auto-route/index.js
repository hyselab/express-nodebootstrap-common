// libs: handle-route.js
var util = require('util');
var path = require('path');
var fs = require('fs');
var statusCodes = require('http').STATUS_CODES;
const CONTROLLER_ACTION_PATTERN = /\/([a-zA-Z0-9_\-]+)\/([a-zA-Z0-9_\-]+)(\/|).*/;
var exports = module.exports;
exports.CONTROLLER_ACTION_PATTERN = CONTROLLER_ACTION_PATTERN;

exports.routeUrlFormat = function routeUrlFormat(routeConfig) {

  return function handleRouteRequest(req, res, next) {
    req.routeConfig = routeConfig;
    var controller = req.controller = req.getController( routeConfig.moduleName, routeConfig.controller);
    req.params.user_method = routeConfig.method;
    req.params.controllername = routeConfig.controller;
    req.params.actionname = routeConfig.action;
    var actionName = routeConfig.action + 'Action';
    var actionForm = routeConfig.action + 'Form';
    if( actionName in controller ) {
      var form = req.getForm( routeConfig.moduleName, routeConfig.controller);
      if( actionForm in form ) {
        form[actionForm](req, res, next);
      }
      return controller[actionName](req, res);
    } else {
      return res.status(404).render('404', {message: util.format('URL "%s" not implemented!', req.path)});
    }
    next();
  }
}

function handleRequestControllerAction(type, root_dir, fnname, url_pattern) {
	type = type || '';
	return function handleControllerAction(req, res) {
		// console.log('BaseUrl: ' + req.baseUrl, 'Path: ' + req.path); process.exit();
		// req.baseUrl;
		// req.path;
    console.log( fnname + ' : called ' + JSON.stringify(req.params, null, '\t') + "\n" + url_pattern );
		var pos = req.originalUrl.indexOf(req.baseUrl);
		var param_action = '', matches = null;
		req.params.user_method = type;
    if( url_pattern instanceof RegExp && CONTROLLER_ACTION_PATTERN == url_pattern && ( matches = req.path.match( CONTROLLER_ACTION_PATTERN )) ) {
      req.params.controllername = matches[1];
      req.params.actionname = matches[2];
      param_action = '/' + (req.params.action = req.params.actionname);
      // console.log('BaseUrl: ' + req.baseUrl, 'Path: ' + req.path); process.exit();
    } else {
      if(type && type.match('info|head|index|list|get|create|put|post|save|update|delete') ) {
        req.params.action = req.params.action || '';
        param_action = '/' + (req.params.actionname = (type + req.params.action));
      } else if( type == '*' ) {
        param_action = '/' + (req.params.action = req.params.actionname);
      } else {
        req.params.action = req.params.actionname = 'index';
        param_action = '';
      }
    }

		console.log( fnname + ' : called ' + JSON.stringify(req.params, null, '\t') );

		var prefix_path = req.params.controllername + param_action;
		var _params = {}, pairs = [];
		if( pos > -1 ) {
      _params = req.originalUrl.substr( pos + (req.baseUrl + '/' + prefix_path).length + 1 );
			_params = _params.split('?');
			_params = _params[0];
			pairs = _params.split('/');
			_params = {};
			for(var i=0; i<pairs.length; i+= 2) {
        if( pairs[i].match(/^\d+$/) ) {
          continue;
        }
				if( i+1 < pairs.length ) {
					req.params[ pairs[i] ] = pairs[i+1];
				} else {
					req.params[ pairs[i] ] = '';
				}
			}
		}
		var path_action = root_dir + '/controllers/'+req.params.controllername.replace(/_/g, '/') + '.js';
		var path_form = root_dir + '/blocks/forms/'+req.params.controllername.replace(/_/g, '/') + '.js';
		path_action = path.normalize( path_action );
		if( fs.existsSync( path_action ) ) {

			var handleForm = require( path_form );

			var handleController = require( path_action );

			var action = [];
			req.params.actionname.split('-').forEach(function(part, i){
				if( i == 0 ) {
					action.push( part.substr(0,1).toLowerCase() + part.substr(1) );
				} else {
					action.push( part.substr(0,1).toUpperCase() + part.substr(1) );
				}
			});
			var formName = action.join('') + 'Form';
			action = action.join('') + 'Action';
			if( (action in handleController) ) {
				if( formName in handleForm ) {
					// https://www.npmjs.com/package/express-form
					var formCb = handleForm[formName]();
					formCb(req, res);
				}
				return handleController[action](req, res);
			}
			return res.status(404).render('500', {error: util.format('action "%s" of controller "%s" not found!', action, req.params.controllername)});
		} else {
			return res.status(404).render('404', {message: util.format('File "%s" not found!', path_action)});
		}
	}
}

function handleRequestController(type, root_dir, url_pattern) {
	return function handleController(req, res) {
		req.baseUrl;
		req.path;
		var pos = req.originalUrl.indexOf(req.baseUrl);
		req.params.actionname = 'index';

		var prefix_path = req.params.controllername;
		var _params = {}, pairs = [];
		if( pos > -1 ) {
			_params = req.originalUrl.substr( pos + (req.baseUrl + prefix_path).length );
			_params = _params.split('?');
			_params = _params[0];
			pairs = _params.split('/');
			_params = {};
			for(var i=0; i<pairs.length; i+= 2) {
				if( i+1<pairs.length ) {
					req.params[ pairs[i] ] = '';
				} else {
					req.params[ pairs[i] ] = pairs[i+1];
				}
			}
		}
		var path_action = root_dir + '/controllers/'+req.params.controllername.replace(/\-/g, '/') + '.js';
		// + '/' + (req.params.actionname || 'index') + '.js';
		path_action = path.normalize( path_action );
		if( fs.existsSync( path_action ) ) {
			var controller = require( path_action );
			var action = (req.params.actionname || '') + 'Action';
			if( (action in controller) ) {
				return controller[action](req, res);
			}
			return res.render('error', {error: util.format('action "%s" of controller "%s" not found!', action, req.params.controllername)});
		} else {
			return res.render('notfound', {message: util.format('File "%s" not found!', path_action)});
		}
	}
}

exports.handleIndex 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('index', root_dir, 'handleIndex', url_pattern);
}

exports.handleGet 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('get', root_dir, 'handleGet', url_pattern);
}

exports.handleList 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('list', root_dir, 'handleGet', url_pattern);
}

exports.handleHead 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('head', root_dir, 'handleHead', url_pattern);
}

exports.handleInfo 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('info', root_dir, 'handleInfo', url_pattern);
}

exports.handlePut 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('put', root_dir, 'handlePut', url_pattern);
}

exports.handleDelete 	= function(root_dir, url_pattern) {
	return handleRequestControllerAction('delete', root_dir, 'handleDelete', url_pattern);
}

exports.handleCreate 	= function(root_dir, url_pattern) {
	return handleRequestControllerAction('create', root_dir, 'handleCreate', url_pattern);
}

exports.handlePost 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('post', root_dir, 'handlePost', url_pattern);
}

exports.handleSave 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('save', root_dir, 'handleSave', url_pattern);
}

exports.handleUpdate 		= function(root_dir, url_pattern) {
	return handleRequestControllerAction('update', root_dir, 'handleUpdate', url_pattern);
}

exports.handle 			= function(root_dir, url_pattern) {
	return handleRequestControllerAction('*', root_dir, 'handle', url_pattern);
}

exports.beforeRequestSubmit = function(root_dir, url_pattern) {
	return function(req, res, next) {
		console.log("beforeRequestSubmit");
		// var Form = require('express-form'), Field = Form.field;
		// Form._options.autoTrim = true;
		next();
	}
	// return handleRequestControllerAction('*', root_dir);
}

exports.handleRequestControllerAction = handleRequestControllerAction;

exports.notfound = function(req, res) {
	console.log("Not found");
	return res.status(404).render('404', {message: util.format('URL "%s" not implemented!', req.path)});
}

/*
exports.handleSave = function(urls, app) {
	urls = (typeof(urls) == 'string') ? [urls] : urls;
	if( typeof(urls) == 'object' && urls.constructor == Array ) {
		return function(req, res) {
			//
		}
	}

}
*/


